import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
# ржПржЗ рж▓рж┐ржВржХржЧрзБрж▓рзЛ ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ рж▓рж┐ржВржХ ржжрж┐рзЯрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи, ржпржжрж┐ ржЪрж╛ржиред
PREMIUM_GROUP_LINK = "https://t.me/+kfLVIaUbgoY0YTBl"
INSTRUCTIONS_CHANNEL_LINK = "https://t.me/+FKMJZInx45FlYWZl"
REQUIRED_REFERRALS = 3
DATA_FILE = "user_data.json"

# --- ржбрзЗржЯрж╛ рж▓рзЛржб ржПржмржВ рж╕рзЗржн ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
def load_user_data():
    """ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ JSON ржлрж╛ржЗрж▓ ржерзЗржХрзЗ рж▓рзЛржб ржХрж░рзЗред"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {} # ржпржжрж┐ ржлрж╛ржЗрж▓ ржЦрж╛рж▓рж┐ ржмрж╛ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯрзЗ ржерж╛ржХрзЗ
    return {}

def save_user_data(data):
    """ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ JSON ржлрж╛ржЗрж▓рзЗ рж╕рзЗржн ржХрж░рзЗред"""
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# --- ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗред"""
    user = update.effective_user
    user_id_str = str(user.id)
    user_data = load_user_data()

    # ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржЖржЧрзЗ ржерзЗржХрзЗржЗ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░рзНржб ржирж╛ ржерж╛ржХрзЗ
    if user_id_str not in user_data:
        user_data[user_id_str] = {
            "name": user.full_name,
            "referrals": 0,
            "referred_by": None
        }
        
        # ржпржжрж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЬрзЯрзЗржи ржХрж░рзЗ
        if context.args:
            referrer_id = context.args[0]
            if referrer_id != user_id_str and referrer_id in user_data:
                user_data[user_id_str]["referred_by"] = referrer_id
                
                # рж░рзЗржлрж╛рж░рж╛рж░рзЗрж░ ржХрж╛ржЙржирзНржЯ ржмрж╛рзЬрж╛ржирзЛ
                if "referrals" in user_data[referrer_id]:
                    user_data[referrer_id]["referrals"] += 1
                else:
                    user_data[referrer_id]["referrals"] = 1

                save_user_data(user_data) # ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛
                
                # рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ рждрж╛рж░ рж╕ржлрж▓ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирж╛ржирзЛ
                try:
                    current_referrals = user_data[referrer_id]['referrals']
                    await context.bot.send_message(
                        chat_id=referrer_id,
                        text=f"ЁЯОЙ ржжрж╛рж░рзБржг! {user.full_name} ржЖржкржирж╛рж░ рж▓рж┐ржВржХрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗред\n\nржЖржкржирж╛рж░ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛: {current_referrals}"
                    )
                    
                    # рж░рзЗржлрж╛рж░рж╛рж░ ржпржжрж┐ ржЯрж╛рж░рзНржЧрзЗржЯ ржкрзВрж░ржг ржХрж░рзЗ
                    if current_referrals >= REQUIRED_REFERRALS:
                        await context.bot.send_message(
                            chat_id=referrer_id,
                            text=f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ {REQUIRED_REFERRALS} ржЬржиржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЫрзЗржиред\n\nЁЯОБ роЗродрпЛ ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржЧрзНрж░рзБржкрзЗрж░ ржЬрзЯрзЗржирж┐ржВ рж▓рж┐ржВржХ:\n{PREMIUM_GROUP_LINK}"
                        )
                except Exception as e:
                    print(f"Referrer notification error: {e}")

    save_user_data(user_data) # ржирждрзБржи ржЗржЙржЬрж╛рж░рзЗрж░ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛

    # ржирждрзБржи ржЗржЙржЬрж╛рж░ржХрзЗ рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ
    welcome_text = f"ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо, {user.full_name}!\n\nржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржорж╛рждрзНрж░ {REQUIRED_REFERRALS} ржЬржи ржмржирзНржзрзБржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред"
    keyboard = [
        [InlineKeyboardButton("ЁЯФЧ ржЖржорж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ", callback_data="get_link")],
        [InlineKeyboardButton("ЁЯдФ ржХрж┐ржнрж╛ржмрзЗ рж░рзЗржлрж╛рж░ ржХрж░ржм?", callback_data="how_to_refer")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# --- ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржиржЧрзБрж▓рзЛрж░ ржХрж╛ржЬ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзЗред"""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    bot_username = (await context.bot.get_me()).username
    user_data = load_user_data()
    
    if query.data == "get_link":
        referral_count = user_data.get(user_id, {}).get("referrals", 0)
        
        referral_link = f"https://t.me/{bot_username}?start={user_id}"
        message_text = (
            f"ЁЯФЧ ржЖржкржирж╛рж░ ржЗржЙржирж┐ржХ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n`{referral_link}`\n\n"
            f"(ржПржЗ рж▓рж┐ржВржХржЯрж┐ ржХржкрж┐ ржХрж░рзЗ ржЖржкржирж╛рж░ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржиред)\n\n"
            f"тЬЕ ржЖржкржирж╛рж░ ржорзЛржЯ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛: {referral_count} ржЬржиред"
        )
        # ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж▓рж┐ржВржХ ржкрж╛ржУрзЯрж╛рж░ рж╢рж░рзНржд ржЪрзЗржХ ржХрж░рж╛
        if referral_count >= REQUIRED_REFERRALS:
             message_text += f"\n\nЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржирж╛рж░ ржЯрж╛рж░рзНржЧрзЗржЯ ржкрзВрж░ржг ржХрж░рзЗржЫрзЗржиред роЗродрпЛ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржЧрзНрж░рзБржкрзЗрж░ рж▓рж┐ржВржХ:\n{PREMIUM_GROUP_LINK}"

        await query.edit_message_text(text=message_text, parse_mode='Markdown')

    elif query.data == "how_to_refer":
        message_text = (
            f"ЁЯдФ **ржХрж┐ржнрж╛ржмрзЗ рж░рзЗржлрж╛рж░ ржХрж░ржмрзЗржи?**\n\n"
            f"рзз. ржкрзНрж░ржержорзЗ 'ржЖржорж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ' ржмрж╛ржЯржи ржерзЗржХрзЗ ржЖржкржирж╛рж░ рж▓рж┐ржВржХржЯрж┐ ржирж┐ржиред\n"
            f"рзи. рж╕рзЗржЗ рж▓рж┐ржВржХржЯрж┐ ржЖржкржирж╛рж░ ржмржирзНржзрзБржжрзЗрж░ ржкрж╛ржарж╛ржиред\n"
            f"рзй. ржЖржкржирж╛рж░ ржмржирзНржзрзБ ржпржЦржи ржУржЗ рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржмржЯрзЗ /start ржХржорж╛ржирзНржб ржжрзЗржмрзЗ, ржЖржкржирж╛рж░ ржПржХржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржЧржгржирж╛ ржХрж░рж╛ рж╣ржмрзЗред\n\n"
            f"тД╣я╕П ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржирж┐рзЯржорж╛ржмрж▓рзА ржЬрж╛ржирждрзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЪрзЛржЦ рж░рж╛ржЦрзБржи:\n{INSTRUCTIONS_CHANNEL_LINK}"
        )
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == "back_to_main":
        user = query.from_user
        welcome_text = f"ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо, {user.full_name}!\n\nржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржорж╛рждрзНрж░ {REQUIRED_REFERRALS} ржЬржи ржмржирзНржзрзБржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред"
        keyboard = [
            [InlineKeyboardButton("ЁЯФЧ ржЖржорж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ", callback_data="get_link")],
            [InlineKeyboardButton("ЁЯдФ ржХрж┐ржнрж╛ржмрзЗ рж░рзЗржлрж╛рж░ ржХрж░ржм?", callback_data="how_to_refer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=welcome_text, reply_markup=reply_markup)


# --- Main Function ---
def main():
    """ржмржЯржЯрж┐ рж╢рзБрж░рзБ ржПржмржВ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзЗред"""
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("рждрзНрж░рзБржЯрж┐: BOT_TOKEN ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("ржмржЯ ржЪрж▓ржЫрзЗ...")
    application.run_polling()

if __name__ == "__main__":
    main()
